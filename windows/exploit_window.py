"""
Exploitation Step Window
Step 2: SQL injection and XSS exploitation
"""

from PyQt5.QtCore import QTimer
from utils.step_window import BaseStepWindow

class ExploitWindow(BaseStepWindow):
    """Exploitation step window"""
    
    def __init__(self, parent=None):
        super().__init__("exploit", "Exploitation", parent)
        self.setWindowTitle("Venom Serpent - Exploitation")
        self.setFixedSize(1000, 700)
    
    def execute_step(self):
        """Execute exploitation step"""
        super().execute_step()
        self.log_output.clear()
        self.simulate_exploitation()
    
    def simulate_exploitation(self):
        """Simulate exploitation activities"""
        target = self.target_info.get('target', '127.0.0.1') if self.target_info else '127.0.0.1'
        
        self.simulate_progress(6000)
        
        self.add_log("üí• Starting exploitation phase...", "system")
        self.add_log(f"üéØ Target: http://{target}/admin/login.php", "info")
        self.add_log("üîç Analyzing login form for vulnerabilities...", "info")
        
        QTimer.singleShot(1000, self.simulate_sql_injection)
        QTimer.singleShot(3000, self.simulate_xss_attacks)
        QTimer.singleShot(5000, self.complete_exploitation)
    
    def simulate_sql_injection(self):
        """Simulate SQL injection attacks"""
        self.add_log("", "info")
        self.add_log("üóÑÔ∏è  Testing for SQL injection vulnerabilities...", "system")
        self.add_log("Testing parameter: username", "info")
        self.add_log("Payload: admin' OR '1'='1' --", "warning")
        self.add_log("Response: 200 OK - Login successful!", "success")
        self.add_log("‚ö†Ô∏è  SQL injection vulnerability confirmed!", "success")
        
        self.add_log("", "info")
        self.add_log("Testing parameter: password", "info")
        self.add_log("Payload: ' UNION SELECT 1,2,3,4,5 --", "warning")
        self.add_log("Response: 200 OK - Database structure exposed!", "success")
        self.add_log("‚ö†Ô∏è  Union-based SQL injection confirmed!", "success")
        
        self.add_log("", "info")
        self.add_log("üóÑÔ∏è  Enumerating database structure...", "system")
        self.add_log("Database: information_schema", "info")
        self.add_log("Tables found:", "success")
        self.add_log("‚îú‚îÄ‚îÄ users", "success")
        self.add_log("‚îú‚îÄ‚îÄ admin_credentials", "success")
        self.add_log("‚îú‚îÄ‚îÄ sessions", "success")
        self.add_log("‚îî‚îÄ‚îÄ logs", "success")
        
        self.add_log("", "info")
        self.add_log("Extracting user credentials...", "system")
        self.add_log("Username: admin", "success")
        self.add_log("Password: admin123", "success")
        self.add_log("Username: root", "success")
        self.add_log("Password: toor", "success")
        self.add_log("Username: administrator", "success")
        self.add_log("Password: password", "success")
    
    def simulate_xss_attacks(self):
        """Simulate XSS attacks"""
        self.add_log("", "info")
        self.add_log("üåê Testing for XSS vulnerabilities...", "system")
        self.add_log("Target: http://127.0.0.1/contact.php", "info")
        self.add_log("Payload: <script>alert('XSS')</script>", "warning")
        self.add_log("Response: 200 OK - Script executed!", "success")
        self.add_log("‚ö†Ô∏è  Reflected XSS vulnerability confirmed!", "success")
        
        self.add_log("", "info")
        self.add_log("Testing stored XSS...", "info")
        self.add_log("Payload: <img src=x onerror=alert('Stored XSS')>", "warning")
        self.add_log("Response: 200 OK - Payload stored in database!", "success")
        self.add_log("‚ö†Ô∏è  Stored XSS vulnerability confirmed!", "success")
        
        self.add_log("", "info")
        self.add_log("üìÅ Testing file upload vulnerabilities...", "system")
        self.add_log("Target: http://127.0.0.1/upload.php", "info")
        self.add_log("Uploading: shell.php", "warning")
        self.add_log("Response: 200 OK - File uploaded successfully!", "success")
        self.add_log("‚ö†Ô∏è  File upload vulnerability confirmed!", "success")
        self.add_log("Shell location: http://127.0.0.1/uploads/shell.php", "success")
    
    def complete_exploitation(self):
        """Complete exploitation step"""
        self.add_log("", "info")
        self.add_log("üíª Testing for command injection...", "system")
        self.add_log("Target: http://127.0.0.1/search.php", "info")
        self.add_log("Payload: test; id", "warning")
        self.add_log("Response: uid=33(www-data) gid=33(www-data) groups=33(www-data)", "success")
        self.add_log("‚ö†Ô∏è  Command injection vulnerability confirmed!", "success")
        
        self.add_log("", "info")
        self.add_log("üîì Attempting privilege escalation...", "system")
        self.add_log("Checking sudo permissions...", "info")
        self.add_log("User www-data can run: /usr/bin/python3 as root", "warning")
        self.add_log("Exploiting sudo privilege escalation...", "warning")
        self.add_log("Response: Root access obtained!", "success")
        self.add_log("‚ö†Ô∏è  Privilege escalation successful!", "success")
        
        self.add_log("", "info")
        self.add_log("‚úÖ Exploitation phase completed!", "success")
        self.add_log("üìä Summary: 5 vulnerabilities exploited successfully", "info")
        self.add_log("üéØ Access level: Root privileges obtained", "success")
        self.add_log("üîë Credentials harvested: 3 admin accounts", "success")
        
        self.step_completed_successfully()
